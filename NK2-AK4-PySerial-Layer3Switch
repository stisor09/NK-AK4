import serial
import time
import getpass


def send_command(cmd, wait=1):
	ser.write(cmd.encode('utf-8') + b'\r\n')
	time.sleep(wait)
	output = ser.read(ser.in_waiting).decode('utf-8', errors='ignore')
	print (output)
serial_port= input('Enter used serial port (/dev/ttyS* or COM*: ')

try:
	ser = serial.Serial(port=serial_port, baudrate=9600, timeout=1, parity=serial.PARITY_NONE, stopbits=serial.STOPBITS_ONE, bytesize=serial.EIGHTBITS)
	print('Serial connection works')
except Exception as e:
	print('Serial connection failed')
	exit(1)	

username= input('Enter new username: ')
password= getpass.getpass('Enter new password: ')
hostname= input('Enter new hostname: ')
mgmt_con= input('Enter the port for Management connection (i.e FastEthernet/GigaEthernet): ')
address = input('Enter new IP + mask address for management port: ')
netport1= input('Enter the interface of your first network: ')
network1= input('Enter the IP address for your network: ')
netport2= input('Enter the interface of your second network: ')
network2= input('Enter the IP address for your network: ')
domain  = input('Enter new device domain: ')
crypto	= input('Enter new crypto key bit size: ')
routerid= input('Enter your OSPF router ID (x.x.x.x): ')
ospf1   = input('Input your first OSPF network command for routing (network NetID area X): ')
ospf2   = input('Input your second OSPF network command for routing (network NetID area X): ') 
ospf3   = input('Input your last OSPF network command for routing ((network NetID area X): ')
if ser.is_open:
	print('Connected')
	
	send_command('\n')
	send_command('enable')
	send_command('conf t')
	send_command('ip domain name ' + domain)
	send_command('hostname ' + hostname)	
	send_command('crypto key generate rsa modulus ' + crypto)
	send_command('username ' + username + ' secret ' + password)
	send_command('enable secret ' + password)
	send_command('line vty 0 4')
	send_command('transport input ssh')
	send_command('login local')
	send_command('exit')
	send_command('ip ssh version 2')
	send_command('interface ' + mgmt_con)
	send_command('no switchport')
	send_command('ip add ' + address)
	send_command('no shutdown')
	send_command('exit')
	send_command('interface ' + netport1)
	send_command('no switchport')
	send_command('ip add ' + network1)
	send_command('exit')
	send_command('interface ' + netport2)
	send_command('no switchport')
	send_command('ip add ' + network2)
	send_command('exit')
	send_command('ip routing')
	send_command('router ospf 1')
	send_command('router-id '+ routerid)	
	send_command('log-adjacency-changes')
	send_command(ospf1)
	send_command(ospf2)
	send_command(ospf3)
	send_command('exit')
	send_command('exit')

	print('Config complete')
	ser.close()
