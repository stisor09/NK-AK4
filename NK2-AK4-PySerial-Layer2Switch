import serial
import time
import getpass


def send_command(cmd, wait=1):
	ser.write(cmd.encode('utf-8') + b'\r\n')
	time.sleep(wait)
	output = ser.read(ser.in_waiting).decode('utf-8', errors='ignore')
	print (output)
serial_port= input('Enter used serial port (/dev/ttyS* or COM*: ')

try:
	ser = serial.Serial(port=serial_port, baudrate=9600, timeout=1, parity=serial.PARITY_NONE, stopbits=serial.STOPBITS_ONE, bytesize=serial.EIGHTBITS)
	print('Serial connection works')
except Exception as e:
	print('Serial connection failed')
	exit(1)	

username= input('Enter new username: ')							#Enter your login username for SSH connections
password= getpass.getpass('Enter new password: ')					#Enter your login password for SSH connections
hostname= input('Enter new hostname: ')							#Enter the new hostname for your device, required for SSH
vlanface= input('Enter new VLAN interface for management: ')				#Enter the management
address = input('Enter new IP + mask address: ')					#Enter the IP address and network mask for the management interface port
vlandb	= input('Enter the VLANs that switch should use: ')				#Enter the VLAN's that the switch should create in its database
domain  = input('Enter new device domain: ')						#Enter the domain of your device
crypto	= input('Enter new crypto key bit size: ')					#Enter the crypto key for your device
trunk_choice = input('Configure trunk interfaces? y/n: ').lower()
if trunk_choice == 'y':
	trunk = input('Enter interface(s) for trunking (ex. range or single): ')
	vlans = input('Enter your vlans for trunking: ')
else:											#Enter all the ports that will be used on this device, purely for TRUNK
	trunk = ''
	vlans = ''
vlans	= input('Enter your vlans for trunking: ')					#This assumes you use gig0/1 to connect to another switch, to trunk specific vlans to the opposing port.
gateway = input('Set default gateway for the switch(IP address): ')			#The default IP address the layer 2 switch will use for SSH connections.


custom_ports = []
port_custom = input('Configure specific port? (y/n): ').lower()                         #Configuring a specific port
while port_custom == 'y':
        custom_port = input('Enter port to configure (FastEthernet/GigbitEthernet x/x): ')
        port_mode = input('Set port mode (access/trunk): ').lower()
        vlan_id = input('Enter VLAN for this port: ')
        custom_ports.append((custom_port, port_mode, vlan_id))
        port_custom = input('Configure another port? (y/n): ').lower()

extra_trunk = input('Do you want to configure an extra trunk interface? (y/n): ').lower()
if extra_trunk == 'y':
        extra_trunk_iface = input('Enter the extra trunk interface (e.g., GigabitEthernet0/1): ')

if ser.is_open:
	print('Connected')
	
	send_command('\n')
	send_command('enable')
	send_command('conf t')
	send_command('ip domain name ' + domain)
	send_command('hostname ' + hostname)	
	send_command('crypto key generate rsa modulus ' + crypto)
	time.sleep(35)
	send_command('username ' + username + 'secret ' + password)
	send_command('enable secret ' + password)
	send_command('line vty 0 4')
	send_command('transport input ssh')
	send_command('login local')
	send_command('exit')
	send_command('ip ssh version 2')
	send_command('ip default-gateway ' + gateway)
	send_command('interface vlan ' + vlanface)
	send_command('ip add ' + address)
	send_command('no shutdown')
	send_command('exit')
	send_command('vlan ' + vlanface)
	send_command('exit')
	if trunk_choice == 'y':
		send_command('inter ' + trunk)
		send_command('switch mode trunk')
		send_command('exit')
	if extra_trunk =='y':
		send_command('inter ' + extra_trunk_iface)
		send_command('switch mode trunk')
		send_command('switch trunk allow vlan ' + vlans)
		send_command('exit')

	send_command('vlan ' + vlandb)
	send_command('exit')
	for port, mode, vlan in custom_ports:
		send_command('interface ' + port)
		if mode == 'access':
			send_command('switchport mode access')
			send_command('switch access vlan ' + vlan)
		elif mode == 'trunk':
			send_command('switchport mode trunk')
			send_command('switchport trunk allowed vlan ' + vlan)
		send_command('no shutdown')
		send_command('exit')

	send_command('exit')
	print('Config complete')
	ser.close()
